b_ols(data=wdi_data, y="CO2pc_tons", X="GDPpc_thous", include_i = TRUE)
wdi_data$residuals <- res
wdi_data$pred_vals <- y_hat
# calculate the predicted values and plot them against the actual CO2pc.
ggplot(data = wdi_data, aes(x=CO2pc_tons, y=pred_vals)) + geom_point() + labs(x="Actual CO2 per capita(tons)", y="Predicted CO2 per capita (tons)")
# Calculate your residuals and plot them against GDPpc
ggplot(data=wdi_data, aes(x=GDPpc_thous ,y=residuals)) + geom_point() + labs(x="GDP per capita (thousand USD)", y="Residuals (thousand USD)")
wdi_data$GDPpc2 <- (wdi_data$GDPpc_thous)^(2)
b_ols(data=wdi_data, y="CO2pc", X=c("GDPpc", "GDPpc2"), include_i = TRUE)
b_ols(data=wdi_data, y="CO2pc", X=c("GDPpc_thous", "GDPpc2"), include_i = TRUE)
rm(list=ls())
library(knitr)
opts_chunk$set(cache = T)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
# Regress CO2pc on GDPpc. Save your residuals
b_ols(data=wdi_data, y="CO2pc", X="GDPpc", include_i = FALSE)
library(knitr)
opts_chunk$set(cache = T)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
rm(list = ls())
mydir <- "~/projects/are212/pset1/"
datadir <- "wdi/"
# Bring in Data
setwd(mydir)
wdi_rawdata <- readr::read_csv(paste0(mydir,datadir,"wdi_carbon_income.csv"), na = ("..")
)
#Reshape data long to wide
wdi_df <- as.data.frame(wdi_rawdata)
wide <- reshape(wdi_df, idvar = c("Country Name", "Country Code"), timevar="Series Name",
drop = "Series Code", direction = "wide")
#Remove empty column of YEAR
wide <- wide[(-6)]
#Remove incomplete observations
wide <- na.omit(wide)
#Should be 194 countries. Check!
wdi_data <- rename(wide, CO2 = "2010 [YR2010].CO2 emissions (kt)",
GDP =  "2010 [YR2010].GDP (constant 2010 US$)",
POP = "2010 [YR2010].Population, total")
summary(wdi_data)
sapply(wdi_data, sd)
hist(wdi_data$CO2, breaks=15)
hist(wdi_data$GDP, breaks=15)
ggplot(data=wdi_data, aes(x= GDP, y = CO2)) + geom_point() + ylab("CO2 Emissions (kt)") + xlab("GDP (USD 2010)") + labs(title="CO2 emissions vs GDP by Country (2010)")
wdi_data$CO2pc <- wdi_data$CO2/wdi_data$POP
wdi_data$GDPpc <- wdi_data$GDP/wdi_data$POP
ggplot(data=wdi_data, aes(x= GDPpc, y = CO2pc)) + geom_point() + ylab("Per capita CO2 Emissions (kt)") + xlab("Per capita GDP (USD 2010)") + labs(title="Per Capita CO2 emissions vs Per Captia GDP (2010)")
#Get sample mean of per capita CO2 emissions
co2mean <- mean(wdi_data$CO2pc)
#Calculate deviance for each observation
wdi_data$CO2pcdev <- wdi_data$CO2pc - co2mean
#Get sample mean of per capita GDP
gdpmean <- mean(wdi_data$GDPpc)
#Calculate deviance for each obs
wdi_data$GDPpcdev <- wdi_data$GDPpc - gdpmean
ggplot(data=wdi_data, aes(x= GDPpcdev, y = CO2pcdev)) + geom_point() + ylab("Per capita CO2 Emissions (kt)") + xlab("Per capita GDP (USD 2010)") + labs(title="Demeaned CO2 vs Demeaned GDP by Country (2010)")
#Natural log of CO2pc
wdi_data$CO2pcln <- log(wdi_data$CO2pc)
#Natural log of GDPpc
wdi_data$GDPpcln <- log(wdi_data$GDPpc)
ggplot(data=wdi_data, aes(x= GDPpcln, y = CO2pcln)) + geom_point() + ylab("Log Per capita CO2 Emissions (kt)") + xlab("Log Per capita GDP (USD 2010)") + labs(title="Logged CO2 Emissions vs Logged GDP by Country")
write.csv(wdi_data, "wdi_data.csv")
# Function to calculate beta coefficient and measures of fit (with or without intercept)
b_ols <- function(data, y, X, include_i=TRUE) {
# Require the 'dplyr' package
require(dplyr)
# Create the y matrix
y_data <- data %>%
# Select y variable data from 'data'
select_(.dots = y) %>%
#if(include_i)
# Convert y_data to matrices
as.matrix()
# Select X variable data from 'data'
X_data <- select_(data, .dots = X)
# Convert X_data to matrices
X_data <- as.matrix(X_data)
# If include intercept == TRUE: Add a column of ones to front
if(include_i) {X_data <- cbind(1, X_data)
colnames(X_data)[1] <- "ones"}
# Calculate beta hat
beta_hat <- solve( t(X_data) %*% X_data ) %*% t(X_data) %*% y_data
# Change the name of 'ones' to 'intercept'
if(include_i){
rownames(beta_hat) <- c("intercept", X)
}
else
rownames(beta_hat) <- c(X)
n <- nrow(X_data)
k <- ncol(X_data)
dof <- n - k
# Uncentered R2
e <- (diag(n) - X_data %*% solve(t(X_data) %*% X_data) %*% t(X_data)) %*% y_data
ruc_sq <- (1- ((t(e) %*% e)) / (t(y_data) %*% y_data))
# Centered R2
i <- rep(1, n)
A <- (diag(i) - (1/n)*(i) %*% t(i))
y_star = A %*% y_data
# Method 1: Not correct if there's no intercept!!
r_sq_alt <- 1 - ( (t(e) %*% e) / (t(y_star) %*% y_star) )
# ssr <- (t(e) %*% e)   # included just for testing
# Method 2: Always correct!
x_star <- A %*% X_data
ssm <- t(beta_hat) %*% t(x_star) %*% x_star %*% beta_hat
sst <- (t(y_star) %*% y_star)
r_sq <- (ssm/sst)
#Adjusted R2
adj_r2 <- 1 - (((n-1)/(n-k))*(1-r_sq))
#AIC
aic <- log((t(e) %*% e)/n) + 2*(k/n)
#SIC
sic <- log((t(e) %*% e)/n) + (k/n)*(log(n))
# s2
s2 <- (t(e) %*% e)/(n-k)
# Residuals
res <<- e
# Predicted Values
y_hat <<- X_data %*% beta_hat
reg_list <- c("Beta_hat" = beta_hat, "n" = n, "dof" = dof, "ruc_sq" = ruc_sq, "r_sq" = r_sq, "Adj_R2" = adj_r2, "AIC" = aic, "SIC" = sic, "s2" = s2, "SST" = sst)
return(reg_list)
}
# Regress CO2pc on GDPpc without an intercept
b_ols(data=wdi_data, y="CO2pc", X="GDPpc", include_i = FALSE)
wdi_data$residuals <- res
wdi_data$pred_vals <- y_hat
wdi_data$CO2pc_tons <- wdi_data$CO2pc*1000 #Change units of per capita CO2 conc to tons
# Rerun regression
b_ols(data=wdi_data, y="CO2pc_tons", X="GDPpc", include_i = FALSE)
wdi_data$GDPpc_thous <- wdi_data$GDPpc*(1/1000)
b_ols(data=wdi_data, y="CO2pc_tons", X="GDPpc_thous", include_i = FALSE)
b_ols(data=wdi_data, y="CO2pc_tons", X="GDPpc_thous", include_i = FALSE)
wdi_data$residuals <- res
wdi_data$pred_vals <- y_hat
# calculate the predicted values and plot them against the actual CO2pc.
ggplot(data = wdi_data, aes(x=CO2pc_tons, y=pred_vals)) + geom_point() + labs(x="Actual CO2 per capita(tons)", y="Predicted CO2 per capita (tons)")
# Calculate your residuals and plot them against GDPpc
ggplot(data=wdi_data, aes(x=GDPpc_thous ,y=residuals)) + geom_point() + labs(x="GDP per capita (thousand USD)", y="Residuals (thousand USD)")
# Run regression with intercept
b_ols(data=wdi_data, y="CO2pc_tons", X="GDPpc_thous", include_i = TRUE)
wdi_data$residuals <- res
wdi_data$pred_vals <- y_hat
# calculate the predicted values and plot them against the actual CO2pc.
ggplot(data = wdi_data, aes(x=CO2pc_tons, y=pred_vals)) + geom_point() + labs(x="Actual CO2 per capita(tons)", y="Predicted CO2 per capita (tons)")
# Calculate your residuals and plot them against GDPpc
ggplot(data=wdi_data, aes(x=GDPpc_thous ,y=residuals)) + geom_point() + labs(x="GDP per capita (thousand USD)", y="Residuals (thousand USD)")
wdi_data$GDPpc2 <- (wdi_data$GDPpc_thous)^(2)
b_ols(data=wdi_data, y="CO2pc", X=c("GDPpc_thous", "GDPpc2"), include_i = TRUE)
wdi_data$residuals <- res
wdi_data$pred_vals <- y_hat
# calculate the predicted values and plot them against the actual CO2pc.
ggplot(data = wdi_data, aes(x=CO2pc_tons, y=pred_vals)) + geom_point() + labs(x="Actual CO2 per capita(tons)", y="Predicted CO2 per capita (tons)")
# Calculate your residuals and plot them against GDPpc
ggplot(data=wdi_data, aes(x=GDPpc_thous ,y=residuals)) + geom_point() + labs(x="GDP per capita (thousand USD)", y="Residuals (USD)")
wdi_data$GDPpc2dev <- wdi_data$GDPpc2 - mean(wdi_data$GDPpc2)
b_ols(data=wdi_data, y="CO2pcdev", X=c("GDPpcdev", "GDPpc2dev"), include_i = FALSE)
# Stata notes on FWT:
# regress y on x, record resid as y-star
# regress x2 on x, record resid as x2_star
# regress y-star on X2_star. --> recover your regression estimates!
# Regress CO2pc on GDPpc. Save your residuals
b_ols(data=wdi_data, y="CO2pc", X="GDPpc", include_i = FALSE)
co2_star <- res
# Now regress the columns of [i GDPpc2] on GDPpc. Save your residuals (an n × 2 matrix of residuals).
wdi_data$i <- rep(1, 194)
b_ols(data=wdi_data, y="i", X="GDPpc", include_i=FALSE)
i_star <- res
b_ols(data=wdi_data, y="GDPpc2", X="GDPpc", include_i=FALSE)
gdp_star <- res
new_data <- as.data.frame(cbind(co2_star, i_star, gdp_star))
colnames(new_data) <- c("co2_star", "i_star", "gdp_star")
# Now regress the first vector of n residuals on the (n × 2) matrix of residuals
b_ols(data=new_data, y="co2_star", X=c("i_star", "gdp_star"), include_i = TRUE)
b_ols(data=new_data, y="co2_star", X=c("i_star", "gdp_star"), include_i = TRUE)
wdi_data$GDPpc2 <- (wdi_data$GDPpc_thous)^(2)
b_ols(data=wdi_data, y="CO2pc_tons", X=c("GDPpc_thous", "GDPpc2"), include_i = TRUE)
# Regress CO2pc on GDPpc. Save your residuals
b_ols(data=wdi_data, y="CO2pc_tons", X="GDPpc_thous", include_i = FALSE)
co2_star <- res
# Now regress the columns of [i GDPpc2] on GDPpc. Save your residuals (an n × 2 matrix of residuals).
wdi_data$i <- rep(1, 194)
b_ols(data=wdi_data, y="i", X="GDPpc_thous", include_i=FALSE)
i_star <- res
b_ols(data=wdi_data, y="GDPpc2", X="GDPpc_thous", include_i=FALSE)
gdp_star <- res
new_data <- as.data.frame(cbind(co2_star, i_star, gdp_star))
colnames(new_data) <- c("co2_star", "i_star", "gdp_star")
# Now regress the first vector of n residuals on the (n × 2) matrix of residuals
b_ols(data=new_data, y="co2_star", X=c("i_star", "gdp_star"), include_i = TRUE)
b_ols(data=new_data, y="co2_star", X=c("i_star", "gdp_star"), include_i = TRUE)
# Regress CO2pc on GDPpc. Save your residuals
b_ols(data=wdi_data, y="CO2pc_tons", X="GDPpc_thous", include_i = FALSE)
co2_star <- res
# Now regress the columns of [i GDPpc2] on GDPpc. Save your residuals (an n × 2 matrix of residuals).
wdi_data$i <- rep(1, 194)
b_ols(data=wdi_data, y="i", X="GDPpc_thous", include_i=FALSE)
i_star <- res
b_ols(data=wdi_data, y="GDPpc2", X="GDPpc_thous", include_i=FALSE)
gdp_star <- res
new_data <- as.data.frame(cbind(co2_star, i_star, gdp_star))
colnames(new_data) <- c("co2_star", "i_star", "gdp_star")
# Now regress the first vector of n residuals on the (n × 2) matrix of residuals
b_ols(data=new_data, y="co2_star", X=c("i_star", "gdp_star"), include_i = TRUE)
View(wdi_data)
b_ols(data=new_data, y="co2_star", X=c("i_star", "gdp_star"), include_i = F)
# Regress CO2pc on GDPpc. Save your residuals
b_ols(data=wdi_data, y="CO2pc_tons", X="GDPpc_thous", include_i = FALSE)
co2_star <- res
# Now regress the columns of [i GDPpc2] on GDPpc. Save your residuals (an n × 2 matrix of residuals).
wdi_data$i <- rep(1, 194)
b_ols(data=wdi_data, y="i", X="GDPpc_thous", include_i=FALSE)
i_star <- res
b_ols(data=wdi_data, y="GDPpc2", X="GDPpc_thous", include_i=FALSE)
gdp_star <- res
new_data <- as.data.frame(cbind(co2_star, i_star, gdp_star))
colnames(new_data) <- c("co2_star", "i_star", "gdp_star")
# Now regress the first vector of n residuals on the (n × 2) matrix of residuals
b_ols(data=new_data, y="co2_star", X=c("i_star", "gdp_star"), include_i = FALSE)
# Now regress the first vector of n residuals on the (n × 2) matrix of residuals
b_ols(data=new_data, y="co2_star", X=c("i_star", "gdp_star"), include_i = FALSE)
View(new_data)
library(knitr)
opts_chunk$set(cache = T)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
rm(list = ls())
mydir <- "~/projects/are212/pset1/"
datadir <- "wdi/"
# Bring in Data
setwd(mydir)
wdi_rawdata <- readr::read_csv(paste0(mydir,datadir,"wdi_carbon_income.csv"), na = ("..")
)
#Reshape data long to wide
wdi_df <- as.data.frame(wdi_rawdata)
wide <- reshape(wdi_df, idvar = c("Country Name", "Country Code"), timevar="Series Name",
drop = "Series Code", direction = "wide")
#Remove empty column of YEAR
wide <- wide[(-6)]
#Remove incomplete observations
wide <- na.omit(wide)
#Should be 194 countries. Check!
wdi_data <- rename(wide, CO2 = "2010 [YR2010].CO2 emissions (kt)",
GDP =  "2010 [YR2010].GDP (constant 2010 US$)",
POP = "2010 [YR2010].Population, total")
summary(wdi_data)
sapply(wdi_data, sd)
hist(wdi_data$CO2, breaks=15)
hist(wdi_data$GDP, breaks=15)
ggplot(data=wdi_data, aes(x= GDP, y = CO2)) + geom_point() + ylab("CO2 Emissions (kt)") + xlab("GDP (USD 2010)") + labs(title="CO2 emissions vs GDP by Country (2010)")
wdi_data$CO2pc <- wdi_data$CO2/wdi_data$POP
wdi_data$GDPpc <- wdi_data$GDP/wdi_data$POP
ggplot(data=wdi_data, aes(x= GDPpc, y = CO2pc)) + geom_point() + ylab("Per capita CO2 Emissions (kt)") + xlab("Per capita GDP (USD 2010)") + labs(title="Per Capita CO2 emissions vs Per Captia GDP (2010)")
#Get sample mean of per capita CO2 emissions
co2mean <- mean(wdi_data$CO2pc)
#Calculate deviance for each observation
wdi_data$CO2pcdev <- wdi_data$CO2pc - co2mean
#Get sample mean of per capita GDP
gdpmean <- mean(wdi_data$GDPpc)
#Calculate deviance for each obs
wdi_data$GDPpcdev <- wdi_data$GDPpc - gdpmean
ggplot(data=wdi_data, aes(x= GDPpcdev, y = CO2pcdev)) + geom_point() + ylab("Per capita CO2 Emissions (kt)") + xlab("Per capita GDP (USD 2010)") + labs(title="Demeaned CO2 vs Demeaned GDP by Country (2010)")
#Natural log of CO2pc
wdi_data$CO2pcln <- log(wdi_data$CO2pc)
#Natural log of GDPpc
wdi_data$GDPpcln <- log(wdi_data$GDPpc)
ggplot(data=wdi_data, aes(x= GDPpcln, y = CO2pcln)) + geom_point() + ylab("Log Per capita CO2 Emissions (kt)") + xlab("Log Per capita GDP (USD 2010)") + labs(title="Logged CO2 Emissions vs Logged GDP by Country")
write.csv(wdi_data, "wdi_data.csv")
# Function to calculate beta coefficient and measures of fit (with or without intercept)
b_ols <- function(data, y, X, include_i=TRUE) {
# Require the 'dplyr' package
require(dplyr)
# Create the y matrix
y_data <- data %>%
# Select y variable data from 'data'
select_(.dots = y) %>%
#if(include_i)
# Convert y_data to matrices
as.matrix()
# Select X variable data from 'data'
X_data <- select_(data, .dots = X)
# Convert X_data to matrices
X_data <- as.matrix(X_data)
# If include intercept == TRUE: Add a column of ones to front
if(include_i) {X_data <- cbind(1, X_data)
colnames(X_data)[1] <- "ones"}
# Calculate beta hat
beta_hat <- solve( t(X_data) %*% X_data ) %*% t(X_data) %*% y_data
# Change the name of 'ones' to 'intercept'
if(include_i){
rownames(beta_hat) <- c("intercept", X)
}
else
rownames(beta_hat) <- c(X)
n <- nrow(X_data)
k <- ncol(X_data)
dof <- n - k
# Uncentered R2
e <- (diag(n) - X_data %*% solve(t(X_data) %*% X_data) %*% t(X_data)) %*% y_data
ruc_sq <- (1- ((t(e) %*% e)) / (t(y_data) %*% y_data))
# Centered R2
i <- rep(1, n)
A <- (diag(i) - (1/n)*(i) %*% t(i))
y_star = A %*% y_data
# Method 1: Not correct if there's no intercept!!
r_sq_alt <- 1 - ( (t(e) %*% e) / (t(y_star) %*% y_star) )
# ssr <- (t(e) %*% e)   # included just for testing
# Method 2: Always correct!
x_star <- A %*% X_data
ssm <- t(beta_hat) %*% t(x_star) %*% x_star %*% beta_hat
sst <- (t(y_star) %*% y_star)
r_sq <- (ssm/sst)
#Adjusted R2
adj_r2 <- 1 - (((n-1)/(n-k))*(1-r_sq))
#AIC
aic <- log((t(e) %*% e)/n) + 2*(k/n)
#SIC
sic <- log((t(e) %*% e)/n) + (k/n)*(log(n))
# s2
s2 <- (t(e) %*% e)/(n-k)
# Residuals
res <<- e
# Predicted Values
y_hat <<- X_data %*% beta_hat
reg_list <- c("Beta_hat" = beta_hat, "n" = n, "dof" = dof, "ruc_sq" = ruc_sq, "r_sq" = r_sq, "Adj_R2" = adj_r2, "AIC" = aic, "SIC" = sic, "s2" = s2, "SST" = sst)
return(reg_list)
}
# Regress CO2pc on GDPpc without an intercept
b_ols(data=wdi_data, y="CO2pc", X="GDPpc", include_i = FALSE)
wdi_data$residuals <- res
wdi_data$pred_vals <- y_hat
wdi_data$CO2pc_tons <- wdi_data$CO2pc*1000 #Change units of per capita CO2 conc to tons
# Rerun regression
b_ols(data=wdi_data, y="CO2pc_tons", X="GDPpc", include_i = FALSE)
wdi_data$GDPpc_thous <- wdi_data$GDPpc*(1/1000)
b_ols(data=wdi_data, y="CO2pc_tons", X="GDPpc_thous", include_i = FALSE)
b_ols(data=wdi_data, y="CO2pc_tons", X="GDPpc_thous", include_i = FALSE)
wdi_data$residuals <- res
wdi_data$pred_vals <- y_hat
# calculate the predicted values and plot them against the actual CO2pc.
ggplot(data = wdi_data, aes(x=CO2pc_tons, y=pred_vals)) + geom_point() + labs(x="Actual CO2 per capita(tons)", y="Predicted CO2 per capita (tons)")
# Calculate your residuals and plot them against GDPpc
ggplot(data=wdi_data, aes(x=GDPpc_thous ,y=residuals)) + geom_point() + labs(x="GDP per capita (thousand USD)", y="Residuals (thousand USD)")
# Run regression with intercept
b_ols(data=wdi_data, y="CO2pc_tons", X="GDPpc_thous", include_i = TRUE)
wdi_data$residuals <- res
wdi_data$pred_vals <- y_hat
# calculate the predicted values and plot them against the actual CO2pc.
ggplot(data = wdi_data, aes(x=CO2pc_tons, y=pred_vals)) + geom_point() + labs(x="Actual CO2 per capita(tons)", y="Predicted CO2 per capita (tons)")
# Calculate your residuals and plot them against GDPpc
ggplot(data=wdi_data, aes(x=GDPpc_thous ,y=residuals)) + geom_point() + labs(x="GDP per capita (thousand USD)", y="Residuals (thousand USD)")
wdi_data$GDPpc2 <- (wdi_data$GDPpc_thous)^(2)
b_ols(data=wdi_data, y="CO2pc_tons", X=c("GDPpc_thous", "GDPpc2"), include_i = TRUE)
wdi_data$residuals <- res
wdi_data$pred_vals <- y_hat
# calculate the predicted values and plot them against the actual CO2pc.
ggplot(data = wdi_data, aes(x=CO2pc_tons, y=pred_vals)) + geom_point() + labs(x="Actual CO2 per capita(tons)", y="Predicted CO2 per capita (tons)")
# Calculate your residuals and plot them against GDPpc
ggplot(data=wdi_data, aes(x=GDPpc_thous ,y=residuals)) + geom_point() + labs(x="GDP per capita (thousand USD)", y="Residuals (USD)")
wdi_data$GDPpc2dev <- wdi_data$GDPpc2 - mean(wdi_data$GDPpc2)
b_ols(data=wdi_data, y="CO2pcdev", X=c("GDPpcdev", "GDPpc2dev"), include_i = FALSE)
# Stata notes on FWT:
# regress y on x, record resid as y-star
# regress x2 on x, record resid as x2_star
# regress y-star on X2_star. --> recover your regression estimates!
# Regress CO2pc on GDPpc. Save your residuals
b_ols(data=wdi_data, y="CO2pc_tons", X="GDPpc_thous", include_i = FALSE)
co2_star <- res
# Now regress the columns of [i GDPpc2] on GDPpc. Save your residuals (an n × 2 matrix of residuals).
wdi_data$i <- rep(1, 194)
b_ols(data=wdi_data, y="i", X="GDPpc_thous", include_i=FALSE)
i_star <- res
b_ols(data=wdi_data, y="GDPpc2", X="GDPpc_thous", include_i=FALSE)
gdp_star <- res
new_data <- as.data.frame(cbind(co2_star, i_star, gdp_star))
colnames(new_data) <- c("co2_star", "i_star", "gdp_star")
# Now regress the first vector of n residuals on the (n × 2) matrix of residuals
b_ols(data=new_data, y="co2_star", X=c("i_star", "gdp_star"), include_i = FALSE)
# Now regress the first vector of n residuals on the (n × 2) matrix of residuals
b_ols(data=new_data, y="co2_star", X=c("i_star", "gdp_star"), include_i = FALSE)
# Now regress the first vector of n residuals on the (n × 2) matrix of residuals
b_ols(data=new_data, y="co2_star", X=c("i_star", "gdp_star"), include_i = FALSE)
wdi_data$i <- rep(1, 194)
b_ols(data=wdi_data, y="i", X="GDPpc_thous", include_i=FALSE)
i_star <- res
b_ols(data=wdi_data, y="GDPpc2", X="GDPpc_thous", include_i=FALSE)
gdp_star <- res
new_data <- as.data.frame(cbind(co2_star, i_star, gdp_star))
colnames(new_data) <- c("co2_star", "i_star", "gdp_star")
b_ols(data=new_data, y="co2_star", X=c("i_star", "gdp_star"), include_i = FALSE)
# Now regress the first vector of n residuals on the (n × 2) matrix of residuals
b_ols(data=new_data, y="co2_star", X=c("i_star", "gdp_star"), include_i = FALSE)
knitr::opts_chunk$set(echo = TRUE)
# Load the 'dplyr' package
library(dplyr)
# Set the seed
set.seed(12345)
# Set the sample size
n <- 100
# Generate the x and error data from N(0,1)
the_data <- tibble(
x = rnorm(n),
e = rnorm(n))
# Calculate y = 3 + 1.5 x + e
the_data <- mutate(the_data, y = 3 + 1.5 * x + e)
# Plot to make sure things are going well.
plot(
# The variables for the plot
x = the_data$x, y = the_data$y,
# Labels and title
xlab = "x", ylab = "y", main = "Our generated data")
b_ols <- function(data, y_var, X_vars, intercept = TRUE) {
# Require the 'dplyr' package
require(dplyr)
# Create the y matrix
y <- data %>%
# Select y variable data from 'data'
select_(.dots = y_var) %>%
# Convert y_data to matrices
as.matrix()
# Create the X matrix
X <- data %>%
# Select X variable data from 'data'
select_(.dots = X_vars)
# If 'intercept' is TRUE, then add a column of ones
# and move the column of ones to the front of the matrix
if (intercept == T) {
# Bind on a column of ones
X <- cbind(1, X)
# Name the column of ones
names(X) <- c("ones", X_vars)
}
# Convert X_data to a matrix
X <- as.matrix(X)
# Calculate beta hat
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% y
# If 'intercept' is TRUE:
# change the name of 'ones' to 'intercept'
if (intercept == T) rownames(beta_hat) <- c("intercept", X_vars)
# Return beta_hat
return(beta_hat)
}
# The estimates
b_w <- b_ols(data = the_data, y_var = "y", X_vars = "x", intercept = T)
b_wo <- b_ols(data = the_data, y_var = "y", X_vars = "x", intercept = F)
# Plot the points
plot(
# The variables for the plot
x = the_data$x, y = the_data$y,
# Labels and title
xlab = "x", ylab = "y", main = "Our generated data")
# Plot the line from the 'with intercept' regression in yellow
abline(a = b_w[1], b = b_w[2], col = "lightblue", lwd = 3)
# Plot the line from the 'without intercept' regression in purple
abline(a = 0, b = b_w[1], col = "purple4", lwd = 2)
# Add a legend
legend(x = min(the_data$x), y = max(the_data$y),
legend = c("with intercept", "w/o intercept"),
# Line widths
lwd = c(3, 2),
# Colors
col = c("lightblue", "purple4"),
# No box around the legend
bty = "n")
# Chunk 1
b_ols <- function(data, y_var, X_vars, intercept = TRUE) {
# Require the 'dplyr' package
require(dplyr)
# Create the y matrix
y <- data %>%
# Select y variable data from 'data'
select_(.dots = y_var) %>%
# Convert y_data to matrices
as.matrix()
# Create the X matrix
X <- data %>%
# Select X variable data from 'data'
select_(.dots = X_vars)
# If 'intercept' is TRUE, then add a column of ones
# and move the column of ones to the front of the matrix
if (intercept == T) {
# Bind on a column of ones
X <- cbind(1, X)
# Name the column of ones
names(X) <- c("ones", X_vars)
}
# Convert X_data to a matrix
X <- as.matrix(X)
# Calculate beta hat
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% y
# If 'intercept' is TRUE:
# change the name of 'ones' to 'intercept'
if (intercept == T) rownames(beta_hat) <- c("intercept", X_vars)
# Return beta_hat
return(beta_hat)
}
library(knitr)
opts_chunk$set(cache = T)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
DeclareUnicodeCharacter{U+304{ }
library(knitr)
opts_chunk$set(cache = T)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
\DeclareUnicodeCharacter{U+304{ }
/DeclareUnicodeCharacter{U+304{ }
/DeclareUnicodeCharacter{U+304{ }
